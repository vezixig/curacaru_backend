// <auto-generated />
using System;
using Curacaru.Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Curacaru.Backend.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240327185031_DeploymentReportFields")]
    partial class DeploymentReportFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClearanceType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Costs")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CostsLastYearBudget")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("DeploymentReportId")
                        .HasColumnType("uuid");

                    b.Property<int>("DistanceToCustomer")
                        .HasColumnType("integer");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeReplacementId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasBudgetError")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPlanned")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SignatureCustomer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SignatureEmployee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeploymentReportId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeReplacementId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.AssignmentDeclaration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CustomerStreet")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("CustomerZipCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<Guid>("InsuranceId")
                        .HasColumnType("uuid");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("InsuranceStreet")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("InsuranceZipCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("InsuredPersonNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SignatureCity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateOnly>("SignatureDate")
                        .HasColumnType("date");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerZipCode");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("InsuranceZipCode");

                    b.HasIndex("CustomerId", "Year")
                        .IsUnique();

                    b.ToTable("AssignmentDeclarations");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CareBenefitAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<decimal>("PreventiveCareAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ReliefAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ReliefAmountLastYear")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SelfPayAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SelfPayRaise")
                        .HasColumnType("numeric");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("EmployeeSalary")
                        .HasColumnType("numeric");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstitutionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("RecognitionDate")
                        .HasColumnType("date");

                    b.Property<decimal>("RideCosts")
                        .HasColumnType("numeric");

                    b.Property<int>("RideCostsType")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ZipCode");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssociatedEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CareLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("DoClearanceCareBenefit")
                        .HasColumnType("boolean");

                    b.Property<bool>("DoClearancePreventiveCare")
                        .HasColumnType("boolean");

                    b.Property<bool>("DoClearanceReliefAmount")
                        .HasColumnType("boolean");

                    b.Property<bool>("DoClearanceSelfPayment")
                        .HasColumnType("boolean");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("InsuranceId")
                        .HasColumnType("uuid");

                    b.Property<int?>("InsuranceStatus")
                        .HasColumnType("integer");

                    b.Property<string>("InsuredPersonNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Salutation")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedEmployeeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("ZipCode");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.DeploymentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CareLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ClearanceType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InsuredPersonNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<string>("SignatureCity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SignatureCustomer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("SignatureDate")
                        .HasColumnType("date");

                    b.Property<string>("SignatureEmployee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("WorkedHours")
                        .HasColumnType("double precision");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId", "Year", "Month", "ClearanceType")
                        .IsUnique();

                    b.ToTable("DeploymentReports");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsManager")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Insurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("InstitutionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ZipCode");

                    b.ToTable("Insurances");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.WorkingTimeReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<string>("SignatureEmployee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SignatureEmployeeCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("SignatureEmployeeDate")
                        .HasColumnType("date");

                    b.Property<string>("SignatureManager")
                        .HasColumnType("text");

                    b.Property<string>("SignatureManagerCity")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("SignatureManagerDate")
                        .HasColumnType("date");

                    b.Property<double>("TotalHours")
                        .HasColumnType("double precision");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("EmployeeId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("WorkingTimeReports");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.ZipCity", b =>
                {
                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ZipCode");

                    b.ToTable("ZipCities");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Appointment", b =>
                {
                    b.HasOne("Curacaru.Backend.Core.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.DeploymentReport", null)
                        .WithMany("Appointments")
                        .HasForeignKey("DeploymentReportId");

                    b.HasOne("Curacaru.Backend.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.Employee", "EmployeeReplacement")
                        .WithMany()
                        .HasForeignKey("EmployeeReplacementId");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeReplacement");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.AssignmentDeclaration", b =>
                {
                    b.HasOne("Curacaru.Backend.Core.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.Customer", "Customer")
                        .WithMany("AssignmentDeclarations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.ZipCity", "CustomerZipCity")
                        .WithMany()
                        .HasForeignKey("CustomerZipCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.Insurance", null)
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.ZipCity", "InsuranceZipCity")
                        .WithMany()
                        .HasForeignKey("InsuranceZipCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerZipCity");

                    b.Navigation("InsuranceZipCity");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Budget", b =>
                {
                    b.HasOne("Curacaru.Backend.Core.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Company", b =>
                {
                    b.HasOne("Curacaru.Backend.Core.Entities.ZipCity", "ZipCity")
                        .WithMany()
                        .HasForeignKey("ZipCode");

                    b.Navigation("ZipCity");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Customer", b =>
                {
                    b.HasOne("Curacaru.Backend.Core.Entities.Employee", "AssociatedEmployee")
                        .WithMany()
                        .HasForeignKey("AssociatedEmployeeId");

                    b.HasOne("Curacaru.Backend.Core.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId");

                    b.HasOne("Curacaru.Backend.Core.Entities.ZipCity", "ZipCity")
                        .WithMany()
                        .HasForeignKey("ZipCode");

                    b.Navigation("AssociatedEmployee");

                    b.Navigation("Insurance");

                    b.Navigation("ZipCity");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.DeploymentReport", b =>
                {
                    b.HasOne("Curacaru.Backend.Core.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Employee", b =>
                {
                    b.HasOne("Curacaru.Backend.Core.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Insurance", b =>
                {
                    b.HasOne("Curacaru.Backend.Core.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Curacaru.Backend.Core.Entities.ZipCity", "ZipCity")
                        .WithMany()
                        .HasForeignKey("ZipCode");

                    b.Navigation("ZipCity");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.WorkingTimeReport", b =>
                {
                    b.HasOne("Curacaru.Backend.Core.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Curacaru.Backend.Core.Entities.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Employee");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AssignmentDeclarations");
                });

            modelBuilder.Entity("Curacaru.Backend.Core.Entities.DeploymentReport", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
